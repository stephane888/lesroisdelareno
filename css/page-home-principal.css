@charset "UTF-8";
/**
 * color de base
 *
 * @format
 */
/**/
/**/
/**
 * Typography.
 */
/**
 * Typography.
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

/**
  Elment de base pour le titre.
*/
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: inherit;
  font-weight: 600;
  line-height: inherit;
  margin: 0;
  color: inherit;
}

h4 {
  font-size: 1.6rem;
  margin: 0 0 0.908rem;
  line-height: 2rem;
}
@media only screen and (min-width: 992px) {
  h4 {
    font-size: 1.984rem;
  }
}

.service-icone {
  height: 100%;
  background-color: #ea000d;
  color: #FFF;
  padding: 4rem;
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
}
.service-icone .icone {
  font-size: 6.16rem;
  margin-right: 2rem;
}
.service-icone .titre {
  color: inherit;
  line-height: 2.6rem;
  margin-bottom: 3.5rem;
  position: relative;
}
.service-icone .titre::before {
  position: absolute;
  top: auto;
  bottom: -1rem;
  width: 3rem;
  height: 0.15rem;
  background-color: #FFF;
  content: "";
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
}
.service-icone:hover {
  background-color: #FFF;
  color: #4c4c4c;
}
.service-icone:hover .titre::before {
  background-color: #4c4c4c;
}

h2 {
  font-size: 2.4rem;
}

.comment-lmsg {
  padding: 0 0 5rem;
  margin: 0;
  background: linear-gradient(11.96deg, #510005, #ea000d);
  color: #FFF;
  text-align: center;
  font-size: 2.212rem;
}
.comment-lmsg .title {
  font-size: 4.08rem;
  padding-top: 3rem;
  padding-bottom: 2.6rem;
}
@media only screen and (min-width: 992px) {
  .comment-lmsg__container {
    max-width: 700px;
  }
}
@media only screen and (min-width: 1201px) {
  .comment-lmsg__container {
    max-width: 920px;
  }
}
@media only screen and (min-width: 1451px) {
  .comment-lmsg__container {
    max-width: 100%;
  }
}
.comment-lmsg__container .card-title-field {
  margin-bottom: 2rem;
  position: relative;
  padding: 0 1.3333333333rem;
}
.comment-lmsg__container .card-title-field::before {
  content: "« ";
  display: inline-block;
  position: absolute;
  left: 0;
  top: 0;
}
.comment-lmsg__container .card-title-field::after {
  content: " »";
  display: inline-block;
  position: absolute;
  right: 0;
  bottom: 0;
}
.comment-lmsg__container .card-content-field {
  font-weight: 600;
  font-size: 1.918rem;
}
.comment-lmsg__container .card-localisation {
  font-size: 1.2962962963rem;
}
.comment-lmsg__container .icons-reviews svg {
  width: 21px;
  fill: #FFF;
  opacity: 0.5;
}
.comment-lmsg__container .icons-reviews .active svg {
  opacity: 1;
}
.comment-lmsg__container .owl-carousel .owl-item {
  display: flex;
  align-items: center;
  justify-content: center;
}
.comment-lmsg__container .owl-carousel .owl-nav {
  margin: 0;
}
.comment-lmsg__container .owl-carousel .owl-nav button {
  position: absolute;
  top: calc(61% - 100px);
  left: -15%;
  bottom: auto;
  background: transparent;
  font-size: 1.68rem;
  border: 2px solid #FFF;
  border-radius: 0;
  transform: rotateZ(-90deg);
  display: none;
}
@media only screen and (min-width: 992px) {
  .comment-lmsg__container .owl-carousel .owl-nav button {
    display: inline-block;
  }
}
.comment-lmsg__container .owl-carousel .owl-nav button.owl-next {
  left: auto;
  right: -15%;
  transform: rotateZ(90deg);
}
.comment-lmsg__container .owl-carousel .owl-nav .owl-svg-nav {
  width: 40px;
  background: transparent;
  fill: #FFF;
}
.comment-lmsg a {
  color: #fff;
}

.seeMore {
  background: #fff;
  border: 2px solid #1b1918;
  border-radius: 2px;
  padding: 15px 20px;
  font-weight: 700;
  font-size: 12px;
  line-height: 14px;
  width: fit-content;
  margin: 50px auto 0;
  cursor: pointer;
}
.seeMore svg {
  margin-left: 0.5rem;
  margin-right: 0.5rem;
}

.lmsg_call_toaction__container {
  border-top: 1rem solid #ea000d;
  box-shadow: 3px 4px 20px rgba(0, 0, 0, 0.1);
  position: relative;
}
.lmsg_call_toaction__container .titre {
  padding: 4rem 4rem 4rem 1rem;
}
.lmsg_call_toaction__container .content-txt {
  padding: 4rem 4rem 4rem 1rem;
  font-size: 1.652rem;
  line-height: 1.56;
}
.lmsg_call_toaction__container .seeMore {
  display: inline-block;
  margin: 0;
  color: #FFF;
  background: #000;
}
.lmsg_call_toaction__container .seeMore a {
  color: #FFF;
}
.lmsg_call_toaction__container .new-badge {
  position: absolute;
  top: -18px;
  left: 0;
  background: #ff7d83;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.25);
  border-radius: 4px;
  -webkit-transform: rotate(-4deg);
  transform: rotate(-4deg);
  padding: 0.6666666667rem;
  font-weight: 600;
  color: #FFF;
}
.lmsg_call_toaction__container .new-badge svg {
  margin-right: 0.6666666667rem;
}

#block-homepageslider .btn a {
  background: #ea000d;
}
#block-homepageslider .md-slide-item > .md-objects > .md-object:first-child {
  border-left: 2px solid #ea000d;
}

/**
 * -- Lesroisdelareno-bundle-model1
 */
.lesroisdelareno-bundle-model1 .titre {
  padding: 1rem 0;
}

.comment-lmsg__container .owl-carousel .owl-nav button {
  left: -90px;
}
.comment-lmsg__container .owl-carousel .owl-nav button.owl-next {
  right: -90px;
  left: auto;
}
.comment-lmsg__container .owl-stage-outer {
  margin-left: auto;
  margin-right: auto;
}
.comment-lmsg__container .owl-carousel {
  max-width: 900px;
  margin-left: auto;
  margin-right: auto;
}

/**
 * --
 */
.services-sliders {
  margin: 0;
}

/**
 * --
 */
.images-bg {
  margin: 0;
  background-color: #d3d4d4;
}

.nos-realisations.titre-section {
  margin-bottom: 0;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/